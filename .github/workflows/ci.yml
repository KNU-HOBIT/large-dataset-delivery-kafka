name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/server

jobs:
  # 코드 품질 검사
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Install Dependencies
      run: |
        cd server
        go mod download
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run Linter
      run: |
        cd server
        golangci-lint run ./...

    - name: Run Security Check
      run: |
        cd server
        gosec ./...

    - name: Check Go Formatting
      run: |
        cd server
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          gofmt -s -l .
          exit 1
        fi

  # 단위 테스트
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Run Tests
      run: |
        cd server
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage.out
        flags: unittests

  # 통합 테스트
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    services:
      kafka:
        image: confluentinc/cp-kafka:7.4.0
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
      
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000

      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        ports:
          - 27017:27017

      influxdb:
        image: influxdb:2.7-alpine
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: admin
          DOCKER_INFLUXDB_INIT_PASSWORD: password123
          DOCKER_INFLUXDB_INIT_ORG: testorg
          DOCKER_INFLUXDB_INIT_BUCKET: testbucket
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: testtoken
        ports:
          - 8086:8086

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Wait for Services
      run: |
        # Wait for services to be ready
        sleep 30

    - name: Run Integration Tests
      run: |
        cd server
        go test -v -tags=integration ./tests/integration/...
      env:
        KAFKA_BROKERS: localhost:9092
        MONGO_URL: mongodb://admin:password123@localhost:27017
        INFLUX_URL: http://localhost:8086

  # Docker 이미지 빌드
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [quality, test]
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        file: ./server/deployments/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 프로덕션 배포 (릴리스 태그가 생성될 때만)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test, build]
    if: github.event_name == 'release'
    environment: production
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

    - name: Deploy to Kubernetes
      run: |
        cd server
        # Update image tag in deployment
        sed -i "s|large-dataset-server:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}|g" deployments/kubernetes/deployment.yaml
        kubectl apply -f deployments/kubernetes/
        kubectl rollout status deployment/large-dataset-server

    - name: Verify Deployment
      run: |
        kubectl get pods -l app=large-dataset-server
        kubectl get services -l app=large-dataset-server

  # 성능 테스트
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Run Benchmarks
      run: |
        cd server
        go test -bench=. -benchmem ./... > benchmark.txt
        cat benchmark.txt

    - name: Comment PR with Benchmark Results
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const benchmark = fs.readFileSync('./server/benchmark.txt', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🚀 Benchmark Results\n\`\`\`\n${benchmark}\n\`\`\``
          }); 